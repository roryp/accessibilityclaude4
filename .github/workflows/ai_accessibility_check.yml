name: AI Accessibility Check

# This workflow requires a MODELS_TOKEN secret to be configured in repository settings
# Get your GitHub Models token from: https://github.com/marketplace/models
# Add it as a repository secret named: MODELS_TOKEN

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  ai-accessibility-check:
    name: AI-Powered Accessibility Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install requests openai
      - name: Check GitHub Models token
        run: |
          if [ -z "${{ secrets.MODELS_TOKEN }}" ]; then
            echo "::warning::MODELS_TOKEN secret is not configured. This workflow requires a GitHub Models API token."
            echo "::warning::Please add the MODELS_TOKEN secret to your repository settings."
            echo "::warning::Get your token from: https://github.com/marketplace/models"
            exit 1
          fi

      - name: Create AI accessibility analyzer using GitHub Models
        env:
          MODELS_TOKEN: ${{ secrets.MODELS_TOKEN }}
        run: |
          cat > ai_accessibility_analyzer.py << 'EOF'
          import requests
          import json
          import os
            def call_github_models(prompt):
              """Call GitHub Models API with GPT-4o"""
              try:
                  # Check if token is available
                  token = os.environ.get('MODELS_TOKEN')
                  if not token:
                      return "Error: MODELS_TOKEN environment variable not set. Please configure the GitHub Models API token in repository secrets."
                  
                  headers = {
                      "Authorization": f"Bearer {token}",
                      "Content-Type": "application/json"
                  }
                  
                  payload = {
                      "model": "gpt-4o",
                      "messages": [
                          {
                              "role": "system",
                              "content": "You are an expert web accessibility consultant with deep knowledge of WCAG 2.1 AA guidelines, Section 508 compliance, and modern accessibility best practices. Provide detailed, actionable feedback on HTML accessibility issues."
                          },
                          {
                              "role": "user", 
                              "content": prompt
                          }
                      ],
                      "temperature": 0.1,
                      "max_tokens": 2000
                  }
                  
                  response = requests.post(
                      "https://models.inference.ai.azure.com/chat/completions",
                      headers=headers,
                      json=payload,
                      timeout=60
                  )
                  
                  if response.status_code == 200:
                      return response.json()["choices"][0]["message"]["content"]
                  else:
                      return f"API Error {response.status_code}: {response.text}"
                      
              except Exception as e:
                  return f"Error calling GitHub Models: {str(e)}"
          
          def analyze_html_file(filename):
              """Advanced AI analysis of HTML file for accessibility"""
              try:
                  with open(filename, 'r', encoding='utf-8') as f:
                      html_content = f.read()
                  
                  # Enhanced prompt optimized for GPT-4o's capabilities  
                  prompt = f"""Perform a comprehensive accessibility audit of this HTML code. Analyze it against WCAG 2.1 AA guidelines and provide detailed findings.

          Focus on these critical areas:
          1. Semantic HTML Structure: Proper heading hierarchy, landmark elements, semantic tags
          2. Images & Media: Alt text quality, decorative vs informative images, complex images  
          3. Forms & Interactive Elements: Labels, fieldsets, error handling, focus management
          4. Keyboard Navigation: Tab order, focus indicators, keyboard traps, skip links
          5. Color & Contrast: Text contrast ratios, color-only information conveyance
          6. ARIA Implementation: Proper ARIA attributes, roles, states, and properties
          7. Document Structure: Language attributes, page titles, meta information
          8. Dynamic Content: Live regions, status updates, progressive enhancement

          For each issue found, provide:
          - Severity: Critical/High/Medium/Low
          - WCAG Guideline: Specific guideline reference
          - Issue Description: Clear explanation of the problem
          - Code Location: Specific HTML elements affected  
          - Remediation: Exact code fixes with before/after examples
          - User Impact: How this affects users with disabilities

          HTML Code to Analyze:
          {html_content}

          Provide your analysis in a structured format with clear sections and actionable recommendations."""
                  
                  ai_response = call_github_models(prompt)
                  return {
                      "file": filename,
                      "analysis": ai_response
                  }
              except Exception as e:
                  return {
                      "file": filename,
                      "analysis": f"Error reading file: {str(e)}"
                  }
            
          def main():
              results = []
              
              # Analyze HTML files
              for filename in ["accessibility-issues-demo.html", "accessibility-fixed-demo.html"]:
                  if os.path.exists(filename):
                      print(f"Analyzing {filename}...")
                      result = analyze_html_file(filename)
                      results.append(result)
                  else:
                      print(f"File {filename} not found, skipping...")
              
              # Save results
              with open('ai_accessibility_results.json', 'w') as f:
                  json.dump(results, f, indent=2)
                  
              # Create detailed markdown report
              with open('ai_accessibility_report.md', 'w') as f:
                  f.write("# 🤖 AI-Powered Accessibility Analysis Report\n\n")
                  f.write("*Analysis performed by GPT-4o via GitHub Models*\n\n")
                  f.write("This report provides comprehensive accessibility analysis based on WCAG 2.1 AA guidelines.\n\n")
                  
                  for result in results:
                      f.write(f"## 📄 Analysis: {result['file']}\n\n")
                      f.write(f"```\n{result['analysis']}\n```\n\n")
                      f.write("---\n\n")
                print("AI accessibility analysis complete!")
          
          if __name__ == "__main__":
              main()
          EOF

      - name: Run AI accessibility analysis
        env:
          MODELS_TOKEN: ${{ secrets.MODELS_TOKEN }}
        run: |
          python ai_accessibility_analyzer.py

      - name: Display AI analysis results
        run: |
          echo "=== AI Accessibility Analysis Results ==="
          if [ -f ai_accessibility_report.md ]; then
            cat ai_accessibility_report.md
          else
            echo "No report generated"
          fi

      - name: Upload AI analysis results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ai-accessibility-analysis
          path: |
            ai_accessibility_results.json
            ai_accessibility_report.md

      - name: Comment on PR with AI analysis
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let report = '';
            
            try {
              report = fs.readFileSync('ai_accessibility_report.md', 'utf8');
            } catch (e) {
              report = 'AI accessibility analysis failed to generate report.';
            }
            
            const comment = `## 🤖 AI-Powered Accessibility Analysis
            
            *Analyzed using GPT-4o via GitHub Models - Advanced AI accessibility audit*
            
            <details>
            <summary>🔍 Click to view detailed AI accessibility analysis</summary>
            
            ${report}
            
            </details>
            
            **💡 Note:** This AI analysis uses GPT-4o's advanced reasoning capabilities to provide comprehensive accessibility insights. It should be used alongside dedicated accessibility testing tools like axe-core and Pa11y for complete coverage.
            
            **🚀 Powered by GitHub Models** - Fast, reliable AI analysis integrated directly into your workflow.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
