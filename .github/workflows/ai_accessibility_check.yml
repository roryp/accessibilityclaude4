name: AI Accessibility Check

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  ai-accessibility-check:
    name: AI-Powered Accessibility Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          
      - name: Start Ollama service
        run: |
          # Start Ollama in background and wait for it to be ready
          ollama serve &
          sleep 15
          
      - name: Pull TinyLlama model (very small - ~1.4GB)
        run: |
          # TinyLlama is one of the smallest usable models
          ollama pull tinyllama
          
      - name: Install Python dependencies
        run: |
          pip install requests
          
      - name: Create simple AI accessibility analyzer
        run: |
          cat > ai_accessibility_analyzer.py << 'EOF'
          import requests
          import json
          import os
          
          def call_ollama(prompt):
              """Call Ollama API with TinyLlama"""
              try:
                  response = requests.post("http://localhost:11434/api/generate", 
                      json={
                          "model": "tinyllama",
                          "prompt": prompt,
                          "stream": False
                      },
                      timeout=120
                  )
                  return response.json().get("response", "No response from AI")
              except Exception as e:
                  return f"Error: {str(e)}"
          
          def analyze_html_file(filename):
              """Simple AI analysis of HTML file"""
              try:
                  with open(filename, 'r', encoding='utf-8') as f:
                      html_content = f.read()
                  
                  # Simple prompt for accessibility check
                  prompt = f"""Please analyze this HTML for accessibility issues. Look for:
          - Missing alt attributes on images
          - Forms without proper labels
          - Missing heading structure
          - Color contrast problems
          - Missing language attributes
          
          HTML content:
          {html_content[:2000]}...
          
          List the main accessibility issues you find:"""
                  
                  ai_response = call_ollama(prompt)
                  return {
                      "file": filename,
                      "analysis": ai_response
                  }
              except Exception as e:
                  return {
                      "file": filename,
                      "analysis": f"Error reading file: {str(e)}"
                  }
          
          def main():
              results = []
              
              # Analyze both HTML files
              for filename in ["accessibility-issues-demo.html", "accessibility-fixed-demo.html"]:
                  if os.path.exists(filename):
                      print(f"Analyzing {filename}...")
                      result = analyze_html_file(filename)
                      results.append(result)
                  else:
                      print(f"File {filename} not found, skipping...")
              
              # Save results
              with open('ai_accessibility_results.json', 'w') as f:
                  json.dump(results, f, indent=2)
              
              # Create simple markdown report
              with open('ai_accessibility_report.md', 'w') as f:
                  f.write("# AI Accessibility Analysis\\n\\n")
                  f.write("*Analysis performed by TinyLlama*\\n\\n")
                  
                  for result in results:
                      f.write(f"## {result['file']}\\n\\n")
                      f.write(f"{result['analysis']}\\n\\n")
                      f.write("---\\n\\n")
              
              print("Analysis complete!")
          
          if __name__ == "__main__":
              main()
          EOF

      - name: Wait for Ollama to be ready
        run: |
          echo "Waiting for Ollama to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:11434/api/tags >/dev/null 2>&1; then
              echo "Ollama is ready!"
              break
            fi
            echo "Attempt $i/30: Ollama not ready yet, waiting..."
            sleep 5
          done

      - name: Analyze accessibility issues with AI
        run: |
          python ai_accessibility_analyzer.py

      - name: Display AI analysis results
        run: |
          echo "=== AI Accessibility Analysis Results ==="
          if [ -f ai_accessibility_report.md ]; then
            cat ai_accessibility_report.md
          else
            echo "No report generated"
          fi

      - name: Upload AI analysis results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ai-accessibility-analysis
          path: |
            ai_accessibility_results.json
            ai_accessibility_report.md

      - name: Comment on PR with AI analysis
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let report = '';
            
            try {
              report = fs.readFileSync('ai_accessibility_report.md', 'utf8');
            } catch (e) {
              report = 'AI accessibility analysis failed to generate report.';
            }
            
            const comment = `## ðŸ¤– AI-Powered Accessibility Analysis
            
            *Analyzed using TinyLlama (1.1B parameters) - running locally in GitHub Actions*
            
            <details>
            <summary>Click to view AI accessibility analysis</summary>
            
            ${report}
            
            </details>
            
            **Note:** This AI analysis is experimental and should be used alongside dedicated accessibility testing tools like axe-core and Pa11y.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
