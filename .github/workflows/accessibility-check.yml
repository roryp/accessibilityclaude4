name: Accessibility Check

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  accessibility-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        npm init -y
        npm install --save-dev @axe-core/cli puppeteer serve

    - name: Start local server
      run: |
        npx serve . -l 3000 &
        sleep 5
      
    - name: Wait for server to be ready
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:3000; do sleep 1; done'

    - name: Run accessibility tests on issues demo
      run: |
        npx axe http://localhost:3000/accessibility-issues-demo.html \
          --reporter json \
          --output accessibility-issues-results.json \
          --exit || true

    - name: Run accessibility tests on fixed demo
      run: |
        npx axe http://localhost:3000/accessibility-fixed-demo.html \
          --reporter json \
          --output accessibility-fixed-results.json \
          --exit || true

    - name: Generate accessibility report
      run: |
        cat > accessibility-report.md << 'EOF'
        # Accessibility Test Results
        
        ## Issues Demo Results
        This file intentionally contains accessibility violations for educational purposes.
        
        ### Violations Found:
        EOF
        
        # Extract violations from issues demo
        node -e "
        const fs = require('fs');
        try {
          const results = JSON.parse(fs.readFileSync('accessibility-issues-results.json', 'utf8'));
          if (results.violations && results.violations.length > 0) {
            console.log('Found', results.violations.length, 'violation types:');
            results.violations.forEach((violation, index) => {
              console.log(\`\${index + 1}. **\${violation.id}**: \${violation.description}\`);
              console.log(\`   - Impact: \${violation.impact}\`);
              console.log(\`   - Occurrences: \${violation.nodes.length}\`);
              console.log('');
            });
          } else {
            console.log('No violations found');
          }
        } catch (error) {
          console.log('Error reading results:', error.message);
        }
        " >> accessibility-report.md
        
        cat >> accessibility-report.md << 'EOF'
        
        ## Fixed Demo Results
        This file should have minimal or no accessibility violations.
        
        ### Violations Found:
        EOF
        
        # Extract violations from fixed demo
        node -e "
        const fs = require('fs');
        try {
          const results = JSON.parse(fs.readFileSync('accessibility-fixed-results.json', 'utf8'));
          if (results.violations && results.violations.length > 0) {
            console.log('⚠️ Found', results.violations.length, 'violation types (these should be investigated):');
            results.violations.forEach((violation, index) => {
              console.log(\`\${index + 1}. **\${violation.id}**: \${violation.description}\`);
              console.log(\`   - Impact: \${violation.impact}\`);
              console.log(\`   - Occurrences: \${violation.nodes.length}\`);
              console.log('');
            });
          } else {
            console.log('✅ No violations found - excellent accessibility!');
          }
        } catch (error) {
          console.log('Error reading results:', error.message);
        }
        " >> accessibility-report.md
        
        cat >> accessibility-report.md << 'EOF'
        
        ## Summary
        
        - **Issues Demo**: Expected to have multiple violations (for educational purposes)
        - **Fixed Demo**: Should have zero or minimal violations
        
        ### WCAG Guidelines Tested
        - Level A and AA compliance
        - Color contrast ratios
        - Keyboard accessibility
        - Screen reader compatibility
        - Semantic HTML structure
        - Form accessibility
        - Image alt text
        - Focus management
        
        ### Next Steps
        If the fixed demo shows violations, review the specific issues and update the code accordingly.
        
        Generated on: $(date)
        EOF

    - name: Upload accessibility results
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-results
        path: |
          accessibility-*.json
          accessibility-report.md

    - name: Comment PR with results (if PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('accessibility-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

    - name: Create check script
      run: |
        cat > check-results.js << 'EOF'
        const fs = require('fs');
        try {
          const results = JSON.parse(fs.readFileSync('accessibility-fixed-results.json', 'utf8'));
          if (results.violations && results.violations.length > 0) {
            const highImpact = results.violations.filter(v => v.impact === 'critical' || v.impact === 'serious');
            if (highImpact.length > 0) {
              console.log('❌ Fixed demo has', highImpact.length, 'critical/serious accessibility violations');
              process.exit(1);
            } else {
              console.log('⚠️ Fixed demo has minor violations but no critical issues');
            }
          } else {
            console.log('✅ Fixed demo passed all accessibility checks');
          }
        } catch (error) {
          console.log('Error checking results:', error.message);
          process.exit(1);
        }
        EOF

    - name: Check if fixed demo has violations
      run: node check-results.js

    - name: Create summary script
      run: |
        cat > summary.js << 'EOF'
        const fs = require('fs');
        try {
          const results = JSON.parse(fs.readFileSync('accessibility-fixed-results.json', 'utf8'));
          const violations = results.violations ? results.violations.length : 0;
          console.log(violations === 0 ? 'PASSED (no violations)' : violations + ' violations found');
        } catch (e) {
          console.log('Error reading results');
        }
        EOF

    - name: Display final summary
      run: |
        echo "🔍 Accessibility Check Summary:"
        echo "================================"
        echo "✅ Issues demo: Tested (violations expected)"
        echo "🎯 Fixed demo: $(node summary.js)"
        echo ""
        echo "📋 Full report available in artifacts"
